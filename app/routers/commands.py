from aiogram import Router, types
from aiogram.filters import Command
from app.database.db import mark_task_done, delete_task_by_id, clear_done_tasks

router = Router()

@router.message(Command("done"))
async def cmd_done(message: types.Message):
    try:
        task_id = int(message.text.split()[1])
        success = mark_task_done(message.from_user.id, task_id)
        if success:
            await message.answer(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{task_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.")
        else:
            await message.answer("‚ùóÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except:
        await message.answer("‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /done [id]")

@router.message(Command("delete"))
async def cmd_delete(message: types.Message):
    try:
        task_id = int(message.text.split()[1])
        success = delete_task_by_id(message.from_user.id, task_id)
        if success:
            await message.answer(f"üóë –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ{task_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ùóÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except:
        await message.answer("‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delete [id]")

@router.message(Command("clear"))
async def cmd_clear(message: types.Message):
    count = clear_done_tasks(message.from_user.id)
    await message.answer(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ {count} –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
