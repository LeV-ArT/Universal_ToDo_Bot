from dotenv import load_dotenv
load_dotenv()

import asyncio
import os
from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from app.routers.tasks import check_deadlines

from app.routers import language, tasks, commands  # —É—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ
from app.keyboards.menu import main_menu_keyboard

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–¥–∞–π –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üí° –í–ê–ñ–õ–ò–í–û: language –º–∞—î –±—É—Ç–∏ –ø–µ—Ä—à–∏–º
dp.include_router(language.router)
dp.include_router(tasks.router)
dp.include_router(commands.router)

async def on_startup():
    print("‚úÖ Deleting webhook (if any)...")
    await bot.delete_webhook()  # Delete the webhook to enable polling

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_deadlines, "interval", minutes=1, args=[bot])  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω—ñ–≤ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    scheduler.start()

    print("‚úÖ Bot is running...")

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())